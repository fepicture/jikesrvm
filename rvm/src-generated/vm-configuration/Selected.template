/*
 *  This file is part of the Jikes RVM project (http://jikesrvm.org).
 *
 *  This file is licensed to You under the Eclipse Public License (EPL);
 *  You may not use this file except in compliance with the License. You
 *  may obtain a copy of the License at
 *
 *      http://www.opensource.org/licenses/eclipse-1.0.php
 *
 *  See the COPYRIGHT.txt file distributed with this work for information
 *  regarding copyright ownership.
 */
package org.jikesrvm.mm.mminterface;

import org.jikesrvm.scheduler.RVMThread;

import org.mmtk.utility.Log;

import org.vmmagic.pragma.*;

import org.vmmagic.unboxed.Address;

import org.vmmagic.unboxed.Offset;

import org.jikesrvm.runtime.Magic;

import static org.jikesrvm.runtime.SysCall.sysCall;

import org.jikesrvm.VM;

import static org.jikesrvm.runtime.EntrypointHelper.getField;

public class Selected {
  public static final String name = "@_PLAN_@";
  @Uninterruptible
  public static final class Plan extends @_PLAN_@
  {
    private static final Plan plan = new Plan();

    @Inline
    public static Plan get() { return plan; }
  }

  @Uninterruptible
  public static final class Collector extends @_PLAN_@Collector
  {
  }

  @Uninterruptible
  public static final class Constraints extends @_PLAN_@Constraints
  {
    private static final Constraints constraints = new Constraints();

    @Inline
    public static Constraints get() { return constraints; }
  }

  @Uninterruptible
  public static class Mutator extends @_PLAN_@Mutator
  {

    Address mmtkHandle;
    static final Offset field1Offset = getField(AddressInfo.class, "field1", Address.class).getOffset();
    static final Offset field2Offset = getField(AddressInfo.class, "field2", Address.class).getOffset();
    static final Offset field3Offset = getField(AddressInfo.class, "field3", Address.class).getOffset();
    static final Offset field4Offset = getField(AddressInfo.class, "field4", Address.class).getOffset();

    public class AddressInfo {
      @Entrypoint
      public Address field1 = Address.max();
      @Entrypoint
      public Address field2 = Address.fromIntSignExtend(12345678);
      @Entrypoint
      public Address field3;
      @Entrypoint
      public Address field4;
    }

    public AddressInfo struc = new AddressInfo();

@_NO_RUST_MASK_START_@
    @Override
    public void initMutator(int id) {
    VM.sysWriteln("Initialising mutator");
      if (id != 1){
        mmtkHandle = sysCall.sysBindMutator(id);
				struc.field1 = mmtkHandle.plus(field1Offset).loadAddress();
        struc.field2 = mmtkHandle.plus(field2Offset).loadAddress();
        struc.field3 = mmtkHandle.plus(field3Offset).loadAddress();
        struc.field4 = mmtkHandle.plus(field4Offset).loadAddress();

      }
    }
@_NO_RUST_MASK_END_@
    public void setHandle(Address handle) {
        if (VM.VerifyAssertions) {
          VM._assert(field1Offset == Offset.fromIntSignExtend(0));
          VM._assert(field2Offset == Offset.fromIntSignExtend(4));
          VM._assert(field3Offset == Offset.fromIntSignExtend(8));
          VM._assert(field4Offset == Offset.fromIntSignExtend(12));
        }
        struc.field1 = handle.plus(field1Offset).loadAddress();
        struc.field2 = handle.plus(field2Offset).loadAddress();
        struc.field3 = handle.plus(field3Offset).loadAddress();
        struc.field4 = handle.plus(field4Offset).loadAddress();
    }

    public Address getHandle() {
        return mmtkHandle;
    }

    @Inline
    public final RVMThread getThread() { return (RVMThread) this; }
    @Inline
    public static Mutator get() { return RVMThread.getCurrentThread(); }
  }
}
