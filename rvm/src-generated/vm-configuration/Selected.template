/*
 *  This file is part of the Jikes RVM project (http://jikesrvm.org).
 *
 *  This file is licensed to You under the Eclipse Public License (EPL);
 *  You may not use this file except in compliance with the License. You
 *  may obtain a copy of the License at
 *
 *      http://www.opensource.org/licenses/eclipse-1.0.php
 *
 *  See the COPYRIGHT.txt file distributed with this work for information
 *  regarding copyright ownership.
 */
package org.jikesrvm.mm.mminterface;

import org.jikesrvm.scheduler.RVMThread;

import org.mmtk.utility.Log;

import org.vmmagic.pragma.*;

import org.vmmagic.unboxed.Address;

import org.vmmagic.unboxed.Offset;

import org.jikesrvm.runtime.Magic;

import static org.jikesrvm.runtime.SysCall.sysCall;

import org.jikesrvm.VM;


public class Selected {
  public static final String name = "@_PLAN_@";
  @Uninterruptible
  public static final class Plan extends @_PLAN_@
  {
    private static final Plan plan = new Plan();

    @Inline
    public static Plan get() { return plan; }
  }

  @Uninterruptible
  public static final class Collector extends @_PLAN_@Collector
  {
  }

  @Uninterruptible
  public static final class Constraints extends @_PLAN_@Constraints
  {
    private static final Constraints constraints = new Constraints();

    @Inline
    public static Constraints get() { return constraints; }
  }

  @Uninterruptible
  public static class Mutator extends @_PLAN_@Mutator
  {

    Address mmtkHandle;
    Byte[] addressBlock = new Byte[32];
    public final Offset handle = Offset.fromIntSignExtend(4);
    public final Offset cursor = Offset.fromIntSignExtend(8);
    public final Offset sentinel = Offset.fromIntSignExtend(12);

@_NO_RUST_MASK_START_@

    @Override
    public void initMutator(int id) {
      if (id != 1){
        mmtkHandle = sysCall.sysBindMutator(id);
        Magic.setAddressAtOffset(addressBlock, handle, mmtkHandle);
        Magic.setAddressAtOffset(addressBlock, cursor, Address.fromIntSignExtend(0x12345678));
        Magic.setAddressAtOffset(addressBlock, sentinel, Address.fromIntSignExtend(0xABCDEF12));
      }
    }

@_NO_RUST_MASK_END_@

    public void setHandle(Address handle) {
        this.mmtkHandle = handle;
        Magic.setAddressAtOffset(addressBlock, this.handle, handle);
        Magic.setAddressAtOffset(addressBlock, cursor, Address.fromIntSignExtend(0x12345678));
        Magic.setAddressAtOffset(addressBlock, sentinel, Address.fromIntSignExtend(0xABCDEF12));
    }

    public Address getHandle() {
        return mmtkHandle;
    }

    public Object getAddressBlock() {
        return addressBlock;
    }



    @Inline
    public final RVMThread getThread() { return (RVMThread) this; }
    @Inline
    public static Mutator get() { return RVMThread.getCurrentThread(); }
  }
}
